#!/opt/homebrew/opt/python@3.11/bin/python3

# ——————————————————————————————————————————————————————————————————————————————
# Installation:
# ——————————————————————————————————————————————————————————————————————————————
# ln -s /your/path/to/makevenv ~/bin/makevenv
# chmod +x /your/path/to/makevenv
# ——————————————————————————————————————————————————————————————————————————————
# Set actual shebang (makevenv directory have to be in PATH):
# head -n1 $(which makevenv) && echo "$(tail -n +2 $(which makevenv))" > $(which makevenv) &> /dev/null; echo '#''!'$(which python3) | cat - $(which makevenv) | tee $(which makevenv) &> /dev/null
# ——————————————————————————————————————————————————————————————————————————————


import sys
import venv
from pathlib import Path


CYAN = "\033[0;96m"
GREEN = "\033[0;92m"
PURPLE = "\033[0;95m"
YELLOW = "\033[0;93m"
RESET = "\033[0m"


if len(sys.argv) != 2:
    print(f"Usage: {Path(__file__).name} [venv_name]")
    sys.exit(1488)


BASE_DIR = Path(".").resolve()
VENV_DIR = BASE_DIR / sys.argv[1]


if (BASE_DIR / sys.argv[1]).exists() and (BASE_DIR / sys.argv[1]).is_dir():
    print(
        f'{PURPLE}Directory {RESET}"{BASE_DIR / sys.argv[1]}"{PURPLE} already exists.{RESET}'
    )
    sys.exit(1488)


# Functions


def create_venv():
    """
    Creates virtual environment and updates pip/setup

    """
    print(f"\n\n{YELLOW}Creating virtual environment...\n{PURPLE}")
    venv.create(BASE_DIR / sys.argv[1], with_pip=True, upgrade_deps=True)
    print(f"\n\n{YELLOW}Virtual environment created.{RESET}\n")


def create_vscode_directory():
    """
    Creating VSCode directory and settings.json with proper pythonPath variables

    """
    if input(
        f"Do you want to create {VENV_DIR}/.vscode/{GREEN}settings.json{RESET}? (y/n) "
    ).lower() not in ("y", "yes"):
        return
    Path.mkdir(VENV_DIR / ".vscode")
    with open(VENV_DIR / ".vscode" / "settings.json", "w") as f:
        f.write(
            '{\n\t"python.pythonPath": "${workspaceFolder}/bin/python",\n\t'
            '"python.defaultInterpreterPath": "${workspaceFolder}/bin/python"\n}'
        )
    print(f"{VENV_DIR}/.vscode/{GREEN}settings.json{RESET} has been created.\n")


def create_gitignore():
    """
    Creates .gitignore file and fill it with the contents of the
    virtual environment directory

    """
    if input(
        f"\n  Do you want to create {GREEN}.gitignore{RESET} with all directory items? (y/n) "
    ).lower() not in ("y", "yes"):
        return
    (gitignore := open(VENV_DIR / ".gitignore", "w")).writelines(
        {i.name + "\n" for i in VENV_DIR.iterdir()}
    )
    if not gitignore.closed: gitignore.close()
    print(f"{VENV_DIR}/{GREEN}.gitignore{RESET} has been created and formed.\n")


def print_resume():
    """
    Prints information about possible further actions

    """
    print(f"\n{CYAN}Process complete. You may copy/paste strings below...{RESET}\n")
    print(f"  {GREEN}source{RESET}", VENV_DIR / "bin" / "activate")
    print(f"  {GREEN}cd{RESET}", VENV_DIR)
    print(f"  {GREEN}ls\033[0;32m -lhGF{RESET}", VENV_DIR)
    print(f"  {GREEN}code{RESET}", VENV_DIR)


# Run


def run():
    """
    Starts process of virtual environment creation

    """
    create_venv()
    create_vscode_directory()
    create_gitignore()
    print_resume()


if __name__ == "__main__":
    run()
    sys.exit(0)
